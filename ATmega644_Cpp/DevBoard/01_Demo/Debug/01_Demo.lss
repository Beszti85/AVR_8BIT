
01_Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f55  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a03  00000000  00000000  000011f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ea  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  000020e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000064e  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000383  00000000  00000000  00002846  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002bc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 6d 00 	call	0xda	; 0xda <main>
  80:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <_ZN6IOPort16SetPortDirectionEh>:
}

int IOPort::GetPinValue(int pin)
{
	return (* _pins & (1 << pin));
}
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	1f 92       	push	r1
  8e:	cd b7       	in	r28, 0x3d	; 61
  90:	de b7       	in	r29, 0x3e	; 62
  92:	69 83       	std	Y+1, r22	; 0x01
  94:	dc 01       	movw	r26, r24
  96:	14 96       	adiw	r26, 0x04	; 4
  98:	ed 91       	ld	r30, X+
  9a:	fc 91       	ld	r31, X
  9c:	15 97       	sbiw	r26, 0x05	; 5
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	80 83       	st	Z, r24
  a2:	0f 90       	pop	r0
  a4:	df 91       	pop	r29
  a6:	cf 91       	pop	r28
  a8:	08 95       	ret

000000aa <_ZN6IOPort9TogglePinEi>:

void IOPort::TogglePin(int pin)
{
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
    *_port = ~(* _pins & (1 << pin));
  ae:	dc 01       	movw	r26, r24
  b0:	ed 91       	ld	r30, X+
  b2:	fc 91       	ld	r31, X
  b4:	11 97       	sbiw	r26, 0x01	; 1
  b6:	12 96       	adiw	r26, 0x02	; 2
  b8:	0d 90       	ld	r0, X+
  ba:	bc 91       	ld	r27, X
  bc:	a0 2d       	mov	r26, r0
  be:	2c 91       	ld	r18, X
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <_ZN6IOPort9TogglePinEi+0x20>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <_ZN6IOPort9TogglePinEi+0x1c>
  ce:	82 23       	and	r24, r18
  d0:	80 95       	com	r24
  d2:	80 83       	st	Z, r24
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <main>:
//#include <avr/io.h>
#include "IOPort.h"
#include "mcu_global.h"

int main(void)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <main+0x6>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0x8>
  e2:	00 d0       	rcall	.+0      	; 0xe4 <main+0xa>
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
	volatile register8_t* _ddr;
public:
	IOPort(register8_t* portRegister, register8_t* pinsRegister, register8_t* ddrRegister) :
	_port(portRegister),
	_pins(pinsRegister),
	_ddr(ddrRegister) {}
  e8:	85 e2       	ldi	r24, 0x25	; 37
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	9a 83       	std	Y+2, r25	; 0x02
  ee:	89 83       	std	Y+1, r24	; 0x01
  f0:	83 e2       	ldi	r24, 0x23	; 35
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	9c 83       	std	Y+4, r25	; 0x04
  f6:	8b 83       	std	Y+3, r24	; 0x03
  f8:	84 e2       	ldi	r24, 0x24	; 36
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	9e 83       	std	Y+6, r25	; 0x06
  fe:	8d 83       	std	Y+5, r24	; 0x05
	IOPort portB(&PORTB, &PINB, &DDRB);
	
	portB.SetPortDirection(0xFF);
 100:	6f ef       	ldi	r22, 0xFF	; 255
 102:	ce 01       	movw	r24, r28
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	0e 94 44 00 	call	0x88	; 0x88 <_ZN6IOPort16SetPortDirectionEh>
    /* Replace with your application code */
    while (1) 
    {
        delay_msec(500);
 10a:	84 ef       	ldi	r24, 0xF4	; 244
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 90 00 	call	0x120	; 0x120 <_Z10delay_msecj>
        portB.TogglePin(0);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	ce 01       	movw	r24, r28
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN6IOPort9TogglePinEi>
 11e:	f5 cf       	rjmp	.-22     	; 0x10a <main+0x30>

00000120 <_Z10delay_msecj>:
#include "mcu_global.h"

void delay_msec (uint16_t msec)
{
    unsigned short i = 0;
    for (i = 0; i < msec; i++)
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	69 f0       	breq	.+26     	; 0x13e <_Z10delay_msecj+0x1e>
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	ef e9       	ldi	r30, 0x9F	; 159
 12a:	ff e0       	ldi	r31, 0x0F	; 15
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <_Z10delay_msecj+0xc>
 130:	00 c0       	rjmp	.+0      	; 0x132 <_Z10delay_msecj+0x12>
 132:	00 00       	nop
 134:	2f 5f       	subi	r18, 0xFF	; 255
 136:	3f 4f       	sbci	r19, 0xFF	; 255
 138:	82 17       	cp	r24, r18
 13a:	93 07       	cpc	r25, r19
 13c:	a9 f7       	brne	.-22     	; 0x128 <_Z10delay_msecj+0x8>
 13e:	08 95       	ret

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
